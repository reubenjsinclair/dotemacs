#+PROPERTY: header-args:emacs-lisp :results silent :tangle ./init.el

* Package system setup

#+BEGIN_SRC emacs-lisp 
  (require 'package)
  (add-to-list 'package-archives '("gnu"   . "https://elpa.gnu.org/packages/"))
  (add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/"))
  (package-initialize)

  (unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package))
  (eval-and-compile
    (setq use-package-always-ensure t
          use-package-expand-minimally t))
#+END_SRC

* Generic setup

#+BEGIN_SRC emacs-lisp 
  (blink-cursor-mode -1)
  (menu-bar-mode -1)
  (tool-bar-mode -1)
  (scroll-bar-mode -1)
  (setq org-confirm-babel-evaluate nil)

  (setq scroll-conservatively 100)
  (setq enable-recursive-minibuffers t)
  (global-display-line-numbers-mode t)
  (setq inhibit-startup-screen t)
  (setq backup-directory-alist `(("." . "~/.emacs.d/backups")))
  (toggle-frame-maximized)
  (setq frame-title-format "emacs")
  (fset 'yes-or-no-p 'y-or-n-p)
  (global-hl-line-mode)


#+END_SRC

** Fonts

#+begin_src emacs-lisp 
  (defvar rjs/default-font-size 105)

  (set-face-attribute 'default nil :font "JetBrainsMono Nerd Font Mono" :height rjs/default-font-size)

  ;; Set the fixed pitch face
  (set-face-attribute 'fixed-pitch nil :font "JetBrainsMono Nerd Font Mono" :height 105)

  ;; Set the variable pitch face
  (set-face-attribute 'variable-pitch nil :font "Comfortaa" :height 120 :weight 'regular)
#+end_src

*** Ligatures

#+BEGIN_SRC emacs-lisp
  (use-package ligature
    :defer t
    :config
    ;; Enable the "www" ligature in every possible major mode
    (ligature-set-ligatures 't '("www"))
    ;; Enable traditional ligature support in eww-mode, if the
    ;; `variable-pitch' face supports it
    (ligature-set-ligatures 'eww-mode '("ff" "fi" "ffi"))
    ;; Enable all Cascadia Code ligatures in programming modes
    (ligature-set-ligatures 'prog-mode '("|||>" "<|||" "<==>" "<!--" "####" "~~>" "***" "||=" "||>"
                                         ":::" "::=" "=:=" "===" "==>" "=!=" "=>>" "=<<" "=/=" "!=="
                                         "!!." ">=>" ">>=" ">>>" ">>-" ">->" "->>" "-->" "---" "-<<"
                                         "<~~" "<~>" "<*>" "<||" "<|>" "<$>" "<==" "<=>" "<=<" "<->"
                                         "<--" "<-<" "<<=" "<<-" "<<<" "<+>" "</>" "###" "#_(" "..<"
                                         "..." "+++" "/==" "///" "_|_" "www" "&&" "^=" "~~" "~@" "~="
                                         "~>" "~-" "**" "*>" "*/" "||" "|}" "|]" "|=" "|>" "|-" "{|"
                                         "[|" "]#" "::" ":=" ":>" ":<" "$>" "==" "=>" "!=" "!!" ">:"
                                         ">=" ">>" ">-" "-~" "-|" "->" "--" "-<" "<~" "<*" "<|" "<:"
                                         "<$" "<=" "<>" "<-" "<<" "<+" "</" "#{" "#[" "#:" "#=" "#!"
                                         "##" "#(" "#?" "#_" "%%" ".=" ".-" ".." ".?" "+>" "++" "?:"
                                         "?=" "?." "??" ";;" "/*" "/=" "/>" "//" "__" "~~" "(*" "*)"
                                         "\\\\" "://"))
    ;; Enables ligature checks globally in all buffers. You can also do it
    ;; per mode with `ligature-mode'.
    (global-ligature-mode t))
#+END_SRC

** Doom
*** Modeline

#+BEGIN_SRC emacs-lisp 
  (use-package doom-modeline
    :init (doom-modeline-mode 1)
    :config
    (setq doom-modeline-hud t)
    (setq doom-modeline-checker-simple-format nil)
    (setq doom-modeline-buffer-state-icon nil)
    (setq doom-modeline-buffer-encoding nil)
    (display-battery-mode +1)
    (setq display-time-format "%a %d %b ╱ %T") ;; E.g.,:  Fri Mar 04 ╱ 03:42:08 pm
    (setq display-time-interval 1) ;; Please update the time every second.
    (display-time-mode)
    (setq display-time-default-load-average nil)
    (setq display-time-load-average nil)
    )
#+END_SRC

*** Themes

#+BEGIN_SRC emacs-lisp

  (use-package doom-themes
    :config
    (load-theme 'doom-one t)
    )

#+END_SRC

* Config settings
** Tangle on save

#+BEGIN_SRC emacs-lisp 
  (defun org-babel-tangle-config ()
    (when (string-equal (buffer-file-name)
                        (expand-file-name "~/.emacs.d/Emacs.org"))
      (let ((org-config-babel-evaluate nil))
        (org-babel-tangle))))

  (add-hook 'org-mode-hook
            (lambda ()
              (add-hook 'after-save-hook #'org-babel-tangle-config)))
#+END_SRC

** Edit

#+BEGIN_SRC emacs-lisp
  (defun rjs/edit-config ()
    (interactive)
    (find-file "~/.emacs.d/Emacs.org")
    (org-mode)
    )
#+END_SRC

** Source

#+BEGIN_SRC emacs-lisp
  (defun rjs/source-config ()
    (interactive)
    (load-file "~/.emacs.d/init.el")
    )
#+END_SRC

* Ivy
** Counsel

#+BEGIN_SRC emacs-lisp
  (use-package counsel
    :defer t
    :init
    (ivy-mode)
    (counsel-mode)
    :config
    (setq ivy-use-virtual-buffers t)
    (setq ivy-count-format "(%d/%d) ")
    )
#+END_SRC

** Ivy Prescient

#+BEGIN_SRC emacs-lisp
  (use-package ivy-prescient
    :after counsel
    :config
    (ivy-prescient-mode)
    )
#+END_SRC

** TODO Ivy Rich
* Evil

#+BEGIN_SRC emacs-lisp 
  (use-package evil
    :init
    (setq evil-want-keybinding nil
          evil-symbol-word-search t
          )

    :config
    (evil-set-undo-system 'undo-tree)
    (evil-mode t)
    (setq evil-cross-lines t
          evil-kill-on-visual-paste nil
          evil-move-beyond-eol t
          evil-want-C-i-jump t
          evil-want-fine-undo t
          evil-v$-excludes-newline t)

    (setq evil-normal-state-cursor  '("#51afef" box)
          evil-insert-state-cursor  '("#38d18f" (bar . 2))
          evil-emacs-state-cursor   '("#c74ee6" box)
          evil-replace-state-cursor '("chocolate" (hbar . 2))
          evil-visual-state-cursor  '("gray" (hbar . 2))
          evil-motion-state-cursor  '("#ababab" box))
    )

  (use-package evil-collection
    :after evil
    :config
    (setq evil-collection-mode-list '(dired))
    (evil-collection-init)

    )

  (global-set-key (kbd "<escape>") 'keyboard-escape-quit)
  (evil-define-key 'normal org-mode-map (kbd "<tab>") #'org-cycle)



    #+END_SRC

** Evil Goggles

#+BEGIN_SRC emacs-lisp
  (use-package evil-goggles
    :after evil
    :ensure t
    :config
    (evil-goggles-mode)
    (setq evil-goggles-blocking-duration 0.100)
    ;; optionally use diff-mode's faces; as a result, deleted text
    ;; will be highlighed with `diff-removed` face which is typically
    ;; some red color (as defined by the color theme)
    (evil-goggles-use-diff-faces)
    ;; other faces such as `diff-added` will be used for other actions
    )
#+END_SRC

** Evil Commentary

#+BEGIN_SRC emacs-lisp
  (use-package evil-commentary
    :after evil
    :config
    (evil-commentary-mode)
    )
#+END_SRC

** Evil Surround

#+BEGIN_SRC emacs-lisp
  (use-package evil-surround
    :after evil
    :config
    (global-evil-surround-mode 1))
#+END_SRC

** Evil Numbers

#+BEGIN_SRC emacs-lisp
  (use-package evil-numbers
    :after evil
    :config
    (define-key evil-normal-state-map (kbd "+") 'evil-numbers/inc-at-pt)
    (define-key evil-normal-state-map (kbd "-") 'evil-numbers/dec-at-pt)
    )
#+END_SRC

** Evil Matchit

#+BEGIN_SRC emacs-lisp
  (use-package evil-matchit
    :after evil
    :config
    (global-evil-matchit-mode 1)
    )
#+END_SRC

** Evil Snipe

#+BEGIN_SRC emacs-lisp
  (use-package evil-snipe
    :after evil
    :config
    (evil-snipe-mode +1)
    )
#+END_SRC

** Evil Anzu

#+begin_src emacs-lisp
  (use-package anzu
    :after evil
    :config
    (global-anzu-mode t)
    )
#+end_src

** Evil Exchange

#+begin_src emacs-lisp
  (use-package evil-exchange
    :after evil
    :config
    (evil-exchange-install)
    )
#+end_src

** Evil Folding

#+begin_src emacs-lisp
  (use-package evil-vimish-fold
    :ensure
    :after evil
    :config
    (global-evil-vimish-fold-mode t))
#+end_src

** Evil Owl

#+BEGIN_SRC emacs-lisp
  (use-package evil-owl
    :after evil
    :config
    (setq evil-owl-max-string-length 500)
    (add-to-list 'display-buffer-alist
                 '("*evil-owl*"
                   (display-buffer-in-side-window)
                   (side . bottom)
                   (window-height . 0.3)))
    (evil-owl-mode))
#+END_SRC

* Org

#+BEGIN_SRC emacs-lisp 
  (defun rjs/insert-src-block ()
    (interactive)
    (insert "#+BEGIN_SRC emacs-lisp\n#+END_SRC")
    (forward-line -1)
    (end-of-line)
    (newline)
    )
#+END_SRC

** Org config

#+BEGIN_SRC emacs-lisp
  (setq org-hide-emphasis-markers t)

  (defun rjs/org-font-setup ()
    ;; Replace list hyphen with dot
    (font-lock-add-keywords 'org-mode
                            '(("^ *\\([-]\\) "
                               (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "•"))))))


    (dolist (face '((org-level-1 . 1.2)
                    (org-level-2 . 1.1)
                    (org-level-3 . 1.05)
                    (org-level-4 . 1.1)
                    (org-level-5 . 1.1)
                    (org-level-6 . 1.1)
                    (org-level-7 . 1.1)
                    (org-level-8 . 1.1)))
      (set-face-attribute (car face) nil :font "Comfortaa" :weight 'regular :height (cdr face)))

    ;; Ensure that anything that should be fixed-pitch in Org files appears that way
    (set-face-attribute 'org-block nil :foreground nil :inherit 'fixed-pitch)
    (set-face-attribute 'org-code nil   :inherit '(shadow fixed-pitch))
    (set-face-attribute 'org-table nil   :inherit '(shadow fixed-pitch))
    (set-face-attribute 'org-verbatim nil :inherit '(shadow fixed-pitch))
    (set-face-attribute 'org-special-keyword nil :inherit '(font-lock-comment-face fixed-pitch))
    (set-face-attribute 'org-meta-line nil :inherit '(font-lock-comment-face fixed-pitch))
    (set-face-attribute 'org-checkbox nil :inherit 'fixed-pitch))
  (defun rjs/org-mode-setup ()
    (org-indent-mode)
    (message "org setup")
    (setq org-startup-folded t)
    (setq org-ellipsis " ▾")
    (variable-pitch-mode 1)
    (auto-fill-mode 0)
    (visual-line-mode 1)
    (display-line-numbers-mode -1)
    )

  (use-package org
    :defer t
    :hook (org-mode . rjs/org-mode-setup)
    :commands (org-capture org-agenda)
    :config
    (rjs/org-font-setup)
    )

  (defun rjs/org-mode-visual-fill ()
    (setq visual-fill-column-width 100
          visual-fill-column-center-text t)
    (visual-fill-column-mode 1))

  (use-package visual-fill-column
    :after org
    :hook (org-mode . rjs/org-mode-visual-fill))
#+END_SRC
  
** Org agenda
#+BEGIN_SRC emacs-lisp
  (setq calendar-week-start-day 1)
  (setq org-agenda-files '("~/Dropbox/notes" "~/.emacs.d"))
  (setq org-directory "~/Dropbox/notes")
  (setq org-log-done t)
  (setq org-default-notes-file (concat org-directory "/notes.org"))
  (setq org-capture-templates
        '(
          ("t" "Todo" entry (file+headline "~/Dropbox/notes/notes.org" "Tasks")
           "* TODO %?\n  %i\n  %a")
          ("p" "Project" entry (file+headline "~/Dropbox/notes/project.org" "Project Tasks")
           "* TODO %?\n  %i\n  %a")
          ))
  (setq org-reverse-note-order nil)
  ;; Add a note whenever a task's deadline or scheduled date is changed.
  (setq org-log-redeadline 'time)
  (setq org-log-reschedule 'time)
  (setq org-todo-keywords
        '((sequence "TODO" "WAIT" "|" "DONE" "CANCELLED")))
  ;; Scheduled items marked as complete will not show up in your agenda view.
  (setq org-agenda-skip-scheduled-if-done t)
  (setq org-agenda-skip-deadline-if-done  t)
  (setq org-agenda-start-on-weekday nil)
  (setq org-columns-default-format   "%60ITEM(Task) %6Effort(Estim){:} %3PRIORITY %TAGS")
  ;; Start each agenda item with ‘○’, then show me it's %timestamp and how many
  ;; times it's been re-%scheduled.
  (setq org-agenda-prefix-format " ○ %t%s%c ")
  (setq org-lowest-priority ?C) ;; Now org-speed-eky ‘,’ gives 3 options
  (setq org-priority-faces
        '((?A :foreground "red"            :weight bold) ;; :background "LightCyan1"
          (?B :foreground "orange"         :weight bold)
          (?C :foreground "green"          :weight bold)))
  ;; See all colours with: M-x list-colors-display
#+END_SRC

***** Pretty Priorities
#+BEGIN_SRC emacs-lisp
  (use-package org-fancy-priorities
    :after org
    :diminish org-fancy-priorities-mode
    :hook   (org-mode . org-fancy-priorities-mode)
    :custom (org-fancy-priorities-list '("HIGH" "MID" "LOW")) ;; "OPTIONAL"
    ;; Let's use the “Eisenhower map of priority”…
    ;; :custom (org-fancy-priorities-list '("Urgent and Important"     ;; Do now!
    ;;                                      "Not Urgent But Important" ;; Do schedule this.
    ;;                                      "Urgent But Not Important" ;; Delegate?
    ;;                                      "Not Urgent and Not Important")) ;; Don't do / Optional
    )
#+END_SRC

** Org evil

#+BEGIN_SRC emacs-lisp
  (use-package evil-org
    :ensure t
    :after org
    :hook (org-mode . (lambda () evil-org-mode))
    :config
    (require 'evil-org-agenda)
    (evil-org-agenda-set-keys))
#+END_SRC

** Org journal

#+BEGIN_SRC emacs-lisp
  (use-package org-journal
    :after org
    :config
    (setq org-journal-dir "~/Dropbox/journal")
    (setq org-journal-file-type "monthly")
    )
#+END_SRC

** Org sticky header

#+BEGIN_SRC emacs-lisp
  (use-package org-sticky-header
    :disabled
    :hook (org-mode . org-sticky-header-mode)
    :config
    (setq-default
     org-sticky-header-full-path 'full
     ;; Child and parent headings are seperated by a /.
     org-sticky-header-outline-path-separator " / "))
#+END_SRC

** Org prettify symbols

#+BEGIN_SRC emacs-lisp
  ;; from https://www.reddit.com/r/emacs/comments/d54ogp/emacs_doom_e17_org_mode_checkboxes/
  (add-hook 'org-mode-hook
            ;; TODO: Use add-to-list instead of "push", to avoid duplicates
            (lambda () "Beautify Org Checkbox Symbol"
              ;; These are nice unicode characters for checkboxes: ☐ ☑ ☒
              (push '("TODO" . "☐") prettify-symbols-alist)
              (push '("WAIT" . "⏹" ) prettify-symbols-alist)
              (push '("DONE" . "☑" ) prettify-symbols-alist)
              (push '("CANCELLED" . "☒" ) prettify-symbols-alist)

              ;; This changed to be case sensitive in a recent update of doom
              (push '("#+BEGIN_SRC" . "↦" ) prettify-symbols-alist)
              (push '("#+END_SRC" . "⇤" ) prettify-symbols-alist)
              (push '("#+BEGIN_EXAMPLE" . "↦" ) prettify-symbols-alist)
              (push '("#+END_EXAMPLE" . "⇤" ) prettify-symbols-alist)
              (push '("#+BEGIN_QUOTE" . "↦" ) prettify-symbols-alist)
              (push '("#+END_QUOTE" . "⇤" ) prettify-symbols-alist)

              (push '("#+begin_quote" . "↦" ) prettify-symbols-alist)
              (push '("#+end_quote" . "⇤" ) prettify-symbols-alist)
              (push '("#+begin_example" . "↦" ) prettify-symbols-alist)
              (push '("#+end_example" . "⇤" ) prettify-symbols-alist)
              (push '("#+begin_src" . "↦" ) prettify-symbols-alist)
              (push '("#+end_src" . "⇤" ) prettify-symbols-alist)

              ;; Monday 2021-11-01 not working
              ;; (push '("+ [ ]" . "☐") prettify-symbols-alist)
              ;; (push '("+ [x]" . "☑" ) prettify-symbols-alist)
              ;; (push '("+ []" . "☒" ) prettify-symbols-alist)

              (prettify-symbols-mode)))
#+END_SRC

** Org bullets

#+BEGIN_SRC emacs-lisp
  (use-package org-bullets
    :defer t
    :hook (org-mode . org-bullets-mode)
    )
#+END_SRC

* Minor packages
** Undo tree

#+BEGIN_SRC emacs-lisp
  (use-package undo-tree
    :after evil
    :config
    (global-undo-tree-mode)
    (setq undo-tree-history-directory-alist '((".*" . "~/.emacs.d/undo")))
    )
#+END_SRC

** All The Icons

#+BEGIN_SRC emacs-lisp
  (use-package all-the-icons
    :defer t
    )

#+END_SRC

** Magit

#+BEGIN_SRC emacs-lisp
  (use-package magit
    :defer t
    )
#+END_SRC

** Which key

#+BEGIN_SRC emacs-lisp
  (use-package which-key
    :after general
    :config
    (setq which-key-idle-delay 0.3)

    (which-key-mode)
    )
#+END_SRC
*** TODO Enable evil commands?

** Helpful
CLOSED: [2023-11-28 Tue 15:29]
#+BEGIN_SRC emacs-lisp

  (use-package helpful
    :defer t
    :commands (helpful-callable helpful-variable helpful-command helpful-key)
    :custom
    (counsel-describe-function-function #'helpful-callable)
    (counsel-describe-variable-function #'helpful-variable)
    :config
    (evil-define-key 'normal helpful-mode-map (kbd "q") 'evil-quit)
    :bind
    ([remap describe-function] . counsel-describe-function)
    ([remap describe-command] . helpful-command)
    ([remap describe-variable] . counsel-describe-variable)
    ([remap describe-key] . helpful-key))
#+end_src

** Hydra

#+BEGIN_SRC emacs-lisp
  (use-package hydra
    :defer t
    )
#+END_SRC

** Switch Window

#+BEGIN_SRC emacs-lisp
  (use-package switch-window
    :defer t
    :config
    (setq switch-window-input-style 'minibuffer)
    (setq switch-window-shortcut-style 'qwerty)
    (setq switch-window-qwerty-shortcuts
          '("a" "r" "s" "t" "n" "e" "i" "o"))
    (setq switch-window-minibuffer-shortcut ?z)
    :bind
    ([remap other-window] . switch-window)
    )
#+END_SRC

** Expand Region

#+BEGIN_SRC emacs-lisp
  (use-package expand-region
    :defer t

    :bind ("C-=" . er/expand-region)
    )
#+END_SRC

** Rainbow delimiters

#+BEGIN_SRC emacs-lisp
  (use-package rainbow-delimiters
    :defer t
    :config
    (add-hook 'prog-mode-hook #'rainbow-delimiters-mode)
    (add-hook 'org-mode-hook #'rainbow-delimiters-mode)
    )
#+END_SRC

* General

#+BEGIN_SRC emacs-lisp
  (use-package general
    :init
    (setq general-override-states '(insert
                                    emacs
                                    hybrid
                                    normal
                                    visual
                                    motion
                                    operator
                                    replace))
    :after evil
    :config
    (general-evil-setup t)

    (general-create-definer rjs/global-leader
      :keymaps 'override
      :states '(normal insert visual emacs)
      :prefix "SPC"
      :global-prefix "C-SPC")

    (general-create-definer rjs/local-leader
      :keymaps 'override
      :states '(normal insert visual emacs)
      :prefix ","
      :global-prefix "C-,")


    (general-imap "q"
      (general-key-dispatch 'self-insert-command
        :timeout 0.25
        "n" 'evil-normal-state)
      )
    )
#+END_SRC

* Keybindings
** Global
#+BEGIN_SRC emacs-lisp
  (defun rjs/open-org-file ()
    (interactive)
    (find-file "~/Dropbox/notes/notes.org")
    )

  (rjs/global-leader
    :states '(normal insert )
    "SPC" '(counsel-find-file :which-key "open file")
    "s" '(save-buffer :which-key "save")
    "x" '(counsel-M-x :which-key "m-x")
    "O" '(rjs/open-org-file :which-key "org")
    )
#+END_SRC

*** Hydra

#+BEGIN_SRC emacs-lisp
  (defhydra hydra-zoom ()
    "zoom"
    ("j" text-scale-increase "in")
    ("k" text-scale-decrease "out")
    ("f" nil "finished" :exit t))
  (rjs/global-leader
    "h" '(:ignore t :which-key "hydra") 
    "hz" '(hydra-zoom/body :which-key "zoom") 
    )
#+END_SRC

*** Config

#+BEGIN_SRC emacs-lisp
  (rjs/global-leader
    "c" '(:ignore t :which-key "config")
    "cl" '(rjs/source-config :which-key "load")
    "co" '(rjs/edit-config :which-key "open")
    )
#+END_SRC
    
*** Org agenda

#+BEGIN_SRC emacs-lisp

  (rjs/global-leader
    "a" '(:ignore t :which-key "agenda")
    "aa" '(org-agenda :which-key "agenda")
    "aa" '(org-agenda :which-key "agenda")
    "ac" '(org-capture :which-key "capture")

    )
#+END_SRC
    
*** Open

#+BEGIN_SRC emacs-lisp

  (rjs/global-leader
    "o" '(:ignore t :which-key "open")
    "oc" '(calc :which-key "calc")
    )
#+END_SRC
    
*** Org journal

#+BEGIN_SRC emacs-lisp
  (rjs/global-leader
    "j" '(:ignore t :which-key "journal")
    "jn" '(org-journal-new-entry :which-key "new")
    "jj" '(org-journal-open-current-journal-file :which-key "view")

    )
#+END_SRC
    
*** Windows

#+BEGIN_SRC emacs-lisp
  (rjs/global-leader
    "w" '(:ignore t :which-key "window")
    "wc" '(delete-window :which-key "close")
    "wo" '(delete-other-windows :which-key "only")
    "ws" '(split-window-vertically :which-key "split")
    "wv" '(split-window-horizontally :which-key "vsplit")
    "ww" '(switch-window :which-key "switch")
    "w-" '(split-window-vertically :which-key "split")
    "w/" '(split-window-horizontally :which-key "vsplit")
    "wj" '(evil-window-down :which-key "select below")
    "wk" '(evil-window-up :which-key "select above")
    "wl" '(evil-window-right :which-key "select right")
    "wh" '(evil-window-left :which-key "select left")
    "wJ" '(evil-window-move-very-bottom :which-key "move below")
    "wK" '(evil-window-move-very-top :which-key "move above")
    "wL" '(evil-window-move-far-right :which-key "move right")
    "wH" '(evil-window-move-far-left :which-key "move left")
    "wr" '(hydra-window-resize/body :which-key "resize")
    )

  (defhydra hydra-window-resize (:timeout 4)
    "resize window"
    ("j" evil-window-decrease-height "decrease height")
    ("k" evil-window-increase-height "increase height")
    ("l" evil-window-increase-width "increase width")
    ("h" evil-window-decrease-width "decrease width")
    ("=" balance-windows "bal")
    ("f" nil "finished" :exit t))
#+END_SRC
    
*** Buffers

#+BEGIN_SRC emacs-lisp
  (rjs/global-leader
    "b" '(:ignore t :which-key "buffer")
    "bb" '(counsel-switch-buffer :which-key "switch")
    "bk" '(kill-this-buffer :which-key "kill")
    )
#+END_SRC
    
*** Magit

#+BEGIN_SRC emacs-lisp
  (rjs/global-leader
    "g" '(magit-status :which-key "magit")
    )
#+END_SRC
    
*** LSP

#+BEGIN_SRC emacs-lisp
  (rjs/global-leader
    "l" '(:ignore t :which-key "lsp")
    "ld" '(:ignore t :which-key "doc")
    "lds" '(lsp-ui-doc-show :which-key "show")
    "ldd" '(lsp-ui-doc-glance :which-key "glance")
    "ldh" '(lsp-ui-doc-hide :which-key "hide")
    )
#+END_SRC
    
** Local

#+BEGIN_SRC emacs-lisp
  (rjs/local-leader
    "s" '(save-buffer :which-key "save")
    )
#+END_SRC

*** Org mode

#+BEGIN_SRC emacs-lisp


  (rjs/local-leader
    :keymaps '(org-mode-map org-agenda-mode-map)
    :states '(motion normal insert)
    "a" '(:ignore t :which-key "agenda")
    "aa" '(org-agenda :which-key "open")
    "c" '(org-capture :which-key "capture")
    "i" '(:ignore t :which-key "insert")
    "ic" '(rjs/insert-src-block :which-key "code")
    "is" '(org-schedule :which-key "schedule")
    "l" '(:ignore t :which-key "link")
    "ly" '(org-store-link :which-key "copy")
    "lp" '(org-insert-link :which-key "paste")
    "f" '(indent-region :which-key "format")
    "t" '(:ignore t :which-key "toggle")
    "tt" '(org-todo :which-key "todo")
    "tp" '(org-priority :which-key "priority")
    "tc" '(org-toggle-checkbox :which-key "checkbox")
    "<" '(org-promote-subtree :which-key "promote")
    ">" '(org-demote-subtree :which-key "demote")
    )
#+END_SRC

*** LSP mode

#+BEGIN_SRC emacs-lisp

  (rjs/local-leader
    :keymaps '(lsp-mode-map)
    :states '(insert normal)
    "a" '(lsp-execute-code-action :which-key "action")
    "t" '(:ignore t :which-key "toggle")
    "tu" '(lsp-ui-mode :which-key "ui")
    "th" '(lsp-headerline-breadcrumb-mode :which-key "headerline")
    )
#+END_SRC

*** Agda mode

#+BEGIN_SRC emacs-lisp
  (defun rjs/agda-add-definition ()
    "Add definition to agda type"
    (interactive)
    (beginning-of-line)
    (setq tempWord (current-word)) ;;This should be a let binding!
    (end-of-line)
    (insert "\n" tempWord " = ?")
    (agda2-load)
    )

  (defun rjs/agda-move-info-right ()
    "Add definition to agda type"
    (interactive)
    (evil-window-down 1)
    (evil-window-move-far-right)
    (evil-window-left 1)
    )

  (rjs/local-leader
    :keymaps '(agda2-mode-map)
    :states '(insert normal)
    "i" '(:ignore t :which-key "insert")
    "id" '(rjs/agda-add-definition :which-key "definition")
    "r" '(agda2-refine :which-key "refine")
    "l" '(agda2-load :which-key "load")
    "j" '(agda2-next-goal :which-key "next")
    "f" '(agda2-next-goal :which-key "next")
    "k" '(agda2-previous-goal :which-key "previous")
    "b" '(agda2-previous-goal :which-key "previous")
    "n" '(agda2-compute-normalised-maybe-toplevel :which-key "normalise")
    "v" '(rjs/agda-move-info-right :which-key "view right")
    "," '(agda2-goal-and-context :which-key "goal and context")
    "C-," '(agda2-goal-and-context :which-key "goal and context")
    )
#+END_SRC

* Development
** Eglot

#+BEGIN_SRC emacs-lisp
  (use-package eglot
    :disabled
    :config
    (setq eglot-confirm-server-initiated-edits nil))
#+END_SRC

** LSP Mode
#+BEGIN_SRC emacs-lisp
  (use-package lsp-mode
    :commands (lsp lsp-deferred)
    :defer t
    :config
    (setq lsp-ui-doc-show-with-cursor t)
    (setq lsp-ui-doc-delay 0)
    (lsp-enable-which-key-integration t)
    )

  (add-hook 'prog-mode-hook 'lsp-deferred)
  (add-hook 'prog-mode-hook 'format-all-mode)
  (add-hook 'format-all-mode-hook 'format-all-ensure-formatter)
  (remove-hook 'elisp-mode 'lsp-deferred)
  (remove-hook 'agda2-mode 'lsp-deferred)
  (remove-hook 'agda2-mode #'lsp)
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (use-package lsp-ui
    :defer t
    )
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (use-package lsp-ivy
    :defer t
    )
#+END_SRC
 
** DAP Mode
#+BEGIN_SRC emacs-lisp
  (use-package dap-mode
    :defer t
    )
#+END_SRC
 
** Languages
*** Haskell
#+BEGIN_SRC emacs-lisp
  (use-package haskell-mode
    :hook (haskell-mode . lsp-deferred)
    :after lsp)
  (use-package lsp-haskell
    :after lsp
    )

  (add-hook 'haskell-mode-hook #'lsp)
  (add-hook 'haskell-literate-mode-hook #'lsp)
#+END_SRC

*** Agda

#+begin_src emacs-lisp
  ;; (load-file (let ((coding-system-for-read 'utf-8))
  ;;                 (shell-command-to-string "agda-mode locate")))
  ;; (add-to-list 'auto-mode-alist '("\\.lagda.md\\'" . agda2-mode))
  (add-to-list 'load-path "/usr/share/agda/emacs-mode/")
  (use-package agda2-mode
    :ensure nil
    :defer t
    :mode "\\.agda\\'"

    :config
    (evil-define-key 'normal 'agda2-mode-map (kbd "M-.") 'agda2-goto-definition-keyboard)
    )
#+end_src

*** JS2

#+begin_src emacs-lisp
  (use-package js2-mode
    :after lsp
    :config
    (setq js-indent-level 2)
    )
#+end_src

* Runtime Performance

#+begin_src emacs-lisp
  (setq gc-cons-threshold (* 2 8 1000 1000))
  (setq read-process-output-max (* 1024 1024))
  (emacs-init-time)
#+end_src





